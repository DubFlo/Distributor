package vendingmachine.ui;

import java.awt.Color;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.util.Hashtable;
import java.util.LinkedHashMap;
import java.util.Map;

import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.border.Border;
import javax.swing.border.EmptyBorder;
import javax.swing.text.AbstractDocument;

import vendingmachine.Coin;
import vendingmachine.Drink;
import vendingmachine.Utils;
import vendingmachine.components.ChangeMachine;
import vendingmachine.components.Context;
import vendingmachine.components.Stock;

/**
 * This class display a configuration menu to let the user choose the
 * drinks, the stocks and the coins inside a hot drinks vending machine.
 */
public class Configuration extends JFrame {

  private static final long serialVersionUID = 1L; // generated by Eclipse

  /**
   * Passed as an attribute to JTextField's to make them accept only integers.
   */
  private static final MyDocumentFilter DOCUMENT_FILTER = new MyDocumentFilter();

  /*
   * Defines default values for the text fields and labels.
   */
  private static final int MAX_NBR_DRINKS = 10;
  private static final Integer[] NBR_DRINKS_LIST = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
  private static final String[] COLUMNS_TITLES = { "  Enter here the drinks names:  ",
    "  Contains sugar?  ", "  Price (in cents):  ", "  Initial stock:  " };
  private static final String[] COINS_TITLES = { "   Coins:  ",
    "  Initial stock:  ", "  Accepted?  " };
  private static final String[] DEFAULT_DRINKS = { "Black Coffee", "Cappuccino", "Hot Chocolate",
    "Hot Milk", "Green Tea", "Earl Grey", "Tomato Soup", "Mushroom Soup", "Hot Water", "Oolong Tea" };

  /**
   * The panel for the drink info.
   * This is the only one that should be repainted, the other ones are created locally.
   */
  private final JPanel drinkPanel;

  /**
   * Allows to choose the number of drinks among some integers.
   */
  private final JComboBox<Integer> drinkNbrComboBox;

  /*
   * Allows the user to enter the drinks information
   */
  private final JTextField[] drinksNames;
  private final JCheckBox[] drinksSugar;
  private final JTextField[] drinksPrices;
  private final JTextField[] drinksStocks;

  /*
   * Allows the user to enter the coins information
   */
  private final Map<Coin, JTextField> coinsStockValues;
  private final Map<Coin, JCheckBox> acceptedCoinsBoxes;

  /*
   * Allows the user to enter the stock information
   */
  private final JTextField sugarCubesNbrValue;
  private final JTextField cupsNbrValue;
  private final JTextField spoonsNbrValue;
  private final JTextField coinStuckProbValue;

  /**
   * Button that triggers the parsing of the values and the creation of the machine.
   */
  private final JButton createButton;

  /**
   * Label that is displayed when the user tries to create a machine
   * with invalid information.
   */
  private final JLabel problemLabel;

  /**
   * Creates a Configuration object that initializes all the fields.
   * The frame is then created and made visible by calling {@code init()} on it.
   */
  public Configuration() {
    super();

    drinkPanel = new JPanel(new GridBagLayout());
    drinkNbrComboBox = new JComboBox<Integer>(NBR_DRINKS_LIST);
    drinkNbrComboBox.setSelectedIndex(7); // to have 8 drinks as a default value
    drinkNbrComboBox.addActionListener(e -> updateDrinkPanel());

    // Initializes the fields for the drinks information
    drinksNames = new JTextField[MAX_NBR_DRINKS];
    drinksSugar = new JCheckBox[MAX_NBR_DRINKS];
    drinksPrices = new JTextField[MAX_NBR_DRINKS];
    drinksStocks = new JTextField[MAX_NBR_DRINKS];
    for (int i = 0; i < MAX_NBR_DRINKS; i++) {
      drinksNames[i] = new JTextField(18);
      if (i < DEFAULT_DRINKS.length) {
        drinksNames[i].setText(DEFAULT_DRINKS[i]);
      }
      drinksSugar[i] = new JCheckBox();
      if (i < 6) { // to make only some drinks sugared by default
        drinksSugar[i].setSelected(true);
      }
      drinksPrices[i] = new JTextField("100", 4);
      // Used to allow only integers on the JTextField
      ((AbstractDocument)drinksPrices[i].getDocument()).setDocumentFilter(DOCUMENT_FILTER);
      drinksStocks[i] = new JTextField("5", 3);
      ((AbstractDocument)drinksStocks[i].getDocument()).setDocumentFilter(DOCUMENT_FILTER);
    }

    // Initializes the fields for the coins info
    coinsStockValues = new Hashtable<Coin, JTextField>();
    acceptedCoinsBoxes = new Hashtable<Coin, JCheckBox>();
    for (Coin coin: Coin.COINS) {
      coinsStockValues.put(coin, new JTextField("5", 3));
      ((AbstractDocument)coinsStockValues.get(coin).getDocument()).setDocumentFilter(DOCUMENT_FILTER);
      acceptedCoinsBoxes.put(coin, new JCheckBox());
    }

    // Initializes the fields for the stock info
    sugarCubesNbrValue = new JTextField("20", 3);
    ((AbstractDocument)sugarCubesNbrValue.getDocument()).setDocumentFilter(DOCUMENT_FILTER);
    cupsNbrValue = new JTextField("10", 3);
    ((AbstractDocument)cupsNbrValue.getDocument()).setDocumentFilter(DOCUMENT_FILTER);
    spoonsNbrValue = new JTextField("8", 3);
    ((AbstractDocument)spoonsNbrValue.getDocument()).setDocumentFilter(DOCUMENT_FILTER);
    coinStuckProbValue = new JTextField("1", 3);
    ((AbstractDocument)coinStuckProbValue.getDocument()).setDocumentFilter(DOCUMENT_FILTER);

    createButton = new JButton("Click here to begin the simulation!");
    createButton.addActionListener(e -> check());
    problemLabel = new JLabel();
    problemLabel.setForeground(Color.RED);
  }

  /**
   * Places the JComponent's on the frame and makes the frame visible.
   */
  public void init() {
    this.setTitle("Vending Machine Configuration");
    this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

    final JPanel mainPanel = new JPanel(new GridBagLayout());
    final GridBagConstraints cMain = new GridBagConstraints();
    final Border grayLine = BorderFactory.createLineBorder(Color.GRAY);
    cMain.insets = new Insets(5, 10, 5, 10); // puts some space around the components
    cMain.gridwidth = GridBagConstraints.REMAINDER;

    final JLabel drinkNbrLabel = new JLabel("Number of drinks:");
    cMain.gridy = 0;
    mainPanel.add(drinkNbrLabel, cMain);
    cMain.gridy += 1;
    mainPanel.add(drinkNbrComboBox, cMain);

    // Creates the drinkPanel
    drinkPanel.setBorder(BorderFactory.createTitledBorder(grayLine, "Drink Information"));
    this.updateDrinkPanel();
    cMain.gridy += 1;
    mainPanel.add(drinkPanel, cMain);

    // Creates the coinPanel
    final JPanel coinPanel = new JPanel(new GridBagLayout());
    coinPanel.setBorder(BorderFactory.createTitledBorder(grayLine, "Coin Information"));
    final GridBagConstraints cCoin = new GridBagConstraints();
    cCoin.gridx = 0; cCoin.gridy = 0;
    for (String s: COINS_TITLES) {
      coinPanel.add(new JLabel(s), cCoin);
      cCoin.gridx += 1;
    }

    for (Coin coin: Coin.COINS) {
      cCoin.gridy += 1; cCoin.gridx = 0;
      coinPanel.add(new JLabel(coin.TEXT), cCoin);
      cCoin.gridx = 1;
      coinPanel.add(coinsStockValues.get(coin), cCoin);
      cCoin.gridx = 2;
      coinPanel.add(acceptedCoinsBoxes.get(coin), cCoin);
      acceptedCoinsBoxes.get(coin).setSelected(true);
    }

    cMain.gridwidth = 2; cMain.gridy += 1; cMain.gridx = 0;
    mainPanel.add(coinPanel, cMain);

    // Creates the stock Panel
    final JPanel stockPanel = new JPanel(new GridBagLayout());
    stockPanel.setBorder(BorderFactory.createTitledBorder(grayLine, "Other Information"));
    final GridBagConstraints cStock = new GridBagConstraints();
    final JLabel sugarCubesNbrLabel = new JLabel("Number of sugar cubes available: ");
    final JLabel cupsNbrLabel = new JLabel("Number of cups available: ");
    final JLabel spoonsNbrLabel = new JLabel("Number of spoons availables: ");
    final JLabel coinStuckProbLabel = new JLabel("Probability of a coin to get stuck in %: ");

    cStock.gridy = 0; cStock.gridx = 0;
    stockPanel.add(sugarCubesNbrLabel, cStock);
    cStock.gridx = 1;
    stockPanel.add(sugarCubesNbrValue, cStock);

    cStock.gridy += 1;  cStock.gridx = 0;
    stockPanel.add(cupsNbrLabel, cStock);
    cStock.gridx = 1;
    stockPanel.add(cupsNbrValue, cStock);

    cStock.gridy += 1;  cStock.gridx = 0;
    stockPanel.add(spoonsNbrLabel, cStock);
    cStock.gridx = 1;
    stockPanel.add(spoonsNbrValue, cStock);

    cStock.gridy += 1;  cStock.gridx = 0;
    stockPanel.add(coinStuckProbLabel, cStock);
    cStock.gridx = 1;
    stockPanel.add(coinStuckProbValue, cStock);

    cMain.gridx = 2;
    mainPanel.add(stockPanel, cMain);

    // Places the button, the problem label and makes the final operations
    cMain.gridy += 1; cMain.gridx = 0;
    cMain.gridwidth = GridBagConstraints.REMAINDER;
    mainPanel.add(createButton, cMain);
    cMain.gridy += 1;
    mainPanel.add(problemLabel, cMain);

    mainPanel.setBorder(new EmptyBorder(10, 10, 10, 10));
    this.add(mainPanel);
    final JScrollPane scrollPane = new JScrollPane(mainPanel); // makes the frame scrollable
    this.add(scrollPane);

    this.getRootPane().setDefaultButton(createButton); // pressing Enter pushes the button
    this.pack();
    this.setLocationRelativeTo(null);
    this.setVisible(true);
  }

  /**
   * Repaints {@code drinkPanel} accordingly if the number of drinks is changed.
   * Removes all the components and places them again with the new number of drinks.
   */
  private void updateDrinkPanel() {
    final Integer NBR_DRINKS = (Integer)drinkNbrComboBox.getSelectedItem();
    drinkPanel.removeAll();

    final GridBagConstraints c = new GridBagConstraints();
    c.gridy = 0; c.gridx = 0;
    for (int i = 0; i < COLUMNS_TITLES.length; i++) { // places the titles of the columns
      drinkPanel.add(new JLabel(COLUMNS_TITLES[i]), c);
      c.gridx += 1;
    }

    for (int i = 0; i < NBR_DRINKS; i++) { // places the drinks text fields
      c.gridy += 1; c.gridx = 0;
      drinkPanel.add(drinksNames[i], c);
      c.gridx = 1;
      drinkPanel.add(drinksSugar[i], c);
      c.gridx = 2;
      drinkPanel.add(drinksPrices[i], c);
      c.gridx = 3;
      drinkPanel.add(drinksStocks[i], c);
    }

    drinkPanel.revalidate();
    this.repaint();
  }

  /**
   * Checks the information the user entered in the configuration frame.
   * If everything is OK, creates the vending machine. Otherwise, displays
   * an error message and lets the user to change what was wrong.
   */
  private void check() {
    // Fetches the values for the drinks
    final Map<Drink, Integer> drinkQty = new LinkedHashMap<Drink, Integer>();
    try {
      for (int i = 0; i < (Integer)drinkNbrComboBox.getSelectedItem(); i++) {
        final String name = drinksNames[i].getText();
        final int price = Integer.parseInt(drinksPrices[i].getText());
        final int stock = Integer.parseInt(drinksStocks[i].getText());
        Utils.checkName(name);
        Utils.checkPositiveInt(price);
        Utils.checkPositiveInt(stock);
        final Drink d = new Drink(name, drinksSugar[i].isSelected(), price);
        drinkQty.put(d, stock);
      }
    } catch (IllegalArgumentException e) {
      problemLabel.setText(getProblemText("drink"));
      this.pack();
      return;
    }

    // Fetches the values for the change machine
    final Map<Coin, Integer> coinsStock = new Hashtable<Coin, Integer>();
    final Map<Coin, Boolean> coinsAccepted = new Hashtable<Coin, Boolean>();
    try {
      for (Coin coin: Coin.COINS) {
        final int stock = Integer.parseInt(coinsStockValues.get(coin).getText());
        Utils.checkPositiveInt(stock);
        coinsStock.put(coin, stock);
        coinsAccepted.put(coin, acceptedCoinsBoxes.get(coin).isSelected());
      }
    } catch (NumberFormatException e) {
      problemLabel.setText(getProblemText("coin"));
      this.pack();
      return;
    }
    final ChangeMachine changeMachine = new ChangeMachine(coinsStock, coinsAccepted);

    // Fetches the values for the stock
    int sugarCubesNbr;
    int cupsNbr;
    int spoonsNbr;
    try {
      sugarCubesNbr = Integer.parseInt(sugarCubesNbrValue.getText());
      cupsNbr = Integer.parseInt(cupsNbrValue.getText());
      spoonsNbr = Integer.parseInt(spoonsNbrValue.getText());
      Utils.checkPositiveInt(sugarCubesNbr);
      Utils.checkPositiveInt(cupsNbr);
      Utils.checkPositiveInt(spoonsNbr);
    } catch (NumberFormatException e) {
      problemLabel.setText(getProblemText("stock"));
      this.pack();
      return;
    }
    final Stock stock = new Stock(sugarCubesNbr, cupsNbr, spoonsNbr, drinkQty);

    int coinStuckProb;
    try {
      coinStuckProb = Integer.parseInt(coinStuckProbValue.getText());
      Utils.checkPercentage(coinStuckProb);
    } catch (NumberFormatException e) {
      problemLabel.setText("Error while parsing probability of stuck coins, should be between 0 and 100.");
      this.pack();
      return;
    }

    final Context context = new Context(changeMachine, stock, coinStuckProb/100.0);
    final VendingMachineGUI gui = new VendingMachineGUI(context);
    this.dispose(); // closes the configuration frame

    SwingUtilities.invokeLater(new Runnable() {
      /**
       * If everything went well, creates the MachineGUI on the EDT.
       */
      @Override
      public void run() {
        gui.init();
      }
    });
  }

  private static String getProblemText(String part) {
    return "<html>Error while parsing " + part + " info. Fields can't be empty.<br>"
        + "Names can't be longer than 18 characters.<br>"
        + "Integers can't be negative or larger than 2^31.</html>";
  }

}